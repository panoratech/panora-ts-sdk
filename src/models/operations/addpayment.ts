/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddPaymentRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedPaymentInput: components.UnifiedPaymentInput;
};

export type AddPaymentResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedPaymentOutput | undefined;
};

export type AddPaymentResponse = {
    httpMeta: components.HTTPMetadata;
    object?: AddPaymentResponseBody | undefined;
    unifiedPaymentOutput?: components.UnifiedPaymentOutput | undefined;
};

/** @internal */
export namespace AddPaymentRequest$ {
    export const inboundSchema: z.ZodType<AddPaymentRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedPaymentInput: components.UnifiedPaymentInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedPaymentInput: "unifiedPaymentInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedPaymentInput: components.UnifiedPaymentInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPaymentRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedPaymentInput: components.UnifiedPaymentInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedPaymentInput: "UnifiedPaymentInput",
            });
        });
}

/** @internal */
export namespace AddPaymentResponseBody$ {
    export const inboundSchema: z.ZodType<AddPaymentResponseBody, z.ZodTypeDef, unknown> = z.object(
        {
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedPaymentOutput$.inboundSchema.optional(),
        }
    );

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedPaymentOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPaymentResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedPaymentOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddPaymentResponse$ {
    export const inboundSchema: z.ZodType<AddPaymentResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => AddPaymentResponseBody$.inboundSchema).optional(),
            UnifiedPaymentOutput: components.UnifiedPaymentOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedPaymentOutput: "unifiedPaymentOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: AddPaymentResponseBody$.Outbound | undefined;
        UnifiedPaymentOutput?: components.UnifiedPaymentOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddPaymentResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => AddPaymentResponseBody$.outboundSchema).optional(),
            unifiedPaymentOutput: components.UnifiedPaymentOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedPaymentOutput: "UnifiedPaymentOutput",
            });
        });
}
