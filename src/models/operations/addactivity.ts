/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type AddActivityRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
    unifiedActivityInput: components.UnifiedActivityInput;
};

export type AddActivityResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedActivityOutput | undefined;
};

export type AddActivityResponse = {
    httpMeta: components.HTTPMetadata;
    object?: AddActivityResponseBody | undefined;
    unifiedActivityOutput?: components.UnifiedActivityOutput | undefined;
};

/** @internal */
export namespace AddActivityRequest$ {
    export const inboundSchema: z.ZodType<AddActivityRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedActivityInput: components.UnifiedActivityInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedActivityInput: "unifiedActivityInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedActivityInput: components.UnifiedActivityInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddActivityRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedActivityInput: components.UnifiedActivityInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedActivityInput: "UnifiedActivityInput",
            });
        });
}

/** @internal */
export namespace AddActivityResponseBody$ {
    export const inboundSchema: z.ZodType<AddActivityResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedActivityOutput$.inboundSchema.optional(),
        });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedActivityOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddActivityResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedActivityOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddActivityResponse$ {
    export const inboundSchema: z.ZodType<AddActivityResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => AddActivityResponseBody$.inboundSchema).optional(),
            UnifiedActivityOutput: components.UnifiedActivityOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedActivityOutput: "unifiedActivityOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: AddActivityResponseBody$.Outbound | undefined;
        UnifiedActivityOutput?: components.UnifiedActivityOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddActivityResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => AddActivityResponseBody$.outboundSchema).optional(),
            unifiedActivityOutput: components.UnifiedActivityOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedActivityOutput: "UnifiedActivityOutput",
            });
        });
}
