overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/hris/employerbenefit"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployerBenefit"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployerbenefit.addEmployerBenefit("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/group/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addGroups"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisGroup.addGroups("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/department"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDepartment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsDepartment.addDepartment("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/job"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getJobs"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJob.getJobs("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getConnections"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connections.getConnections();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "deleteWebhook"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.deleteWebhook("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDeals"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmDeals.getDeals("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingTag"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTags.getTicketingTag("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/scorecard"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getScoreCards"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScorecard.getScoreCards("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/address"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAddresss"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAddress.getAddresss("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments/{id}/download"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "downloadAttachment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingAttachments.downloadAttachment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/taxrate"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTaxRates"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTaxrate.getTaxRates("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transaction"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTransactions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTransaction.getTransactions("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employee"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployee"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployee.addEmployee("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employment/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployment.getEmployment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addBatchLinkedUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.addBatchLinkedUsers({
                linkedUserOriginIds: [
                  "<value>",
                ],
                alias: "<value>",
                idProject: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/properties"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCustomProviderProperties"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.getCustomProviderProperties("<value>", "<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/company/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCompanys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisCompany.addCompanys("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstage"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getJobInterviewStages"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJobinterviewstage.getJobInterviewStages("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/managed-webhooks/{id_connection}"]["put"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateManagedWebhooksStatus"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.managedWebhooks.updateManagedWebhooksStatus("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/managed-webhooks"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createManagedWebhook"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.managedWebhooks.createManagedWebhook({
                idConnection: "<value>",
                scopes: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmContacts.updateContact("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateTask"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmTasks.updateTask("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/vendorcredit"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getVendorCredits"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingVendorcredit.getVendorCredits("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/sharedlink"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addSharedlink"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageSharedlink.addSharedlink("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expense"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addExpense"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingExpense.addExpense("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/phonenumber"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPhoneNumber"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPhonenumber.addPhoneNumber("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections/gorgias/oauth/install"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "ConnectionsController_handleGorgiasAuthUrl"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connections.connectionsControllerHandleGorgiasAuthUrl({
                account: "81441797",
                responseType: "<value>",
                nonce: "<value>",
                scope: "<value>",
                clientId: "<value>",
                redirectUri: "<value>",
                state: "Massachusetts",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTask"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmTasks.getTask("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections-strategies/getConnectionStrategiesForProject"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getConnectionStrategiesForProject"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connectionsStrategies.getConnectionStrategiesForProject();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automation/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAutomations"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAutomation.addAutomations("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/bankinfo/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getBankinfo"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBankinfo.getBankinfo("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/company"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCompanys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisCompany.getCompanys("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contact/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAccountingContacts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingContact.addAccountingContacts("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/journalentry/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addJournalEntrys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingJournalentry.addJournalEntrys("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/projects"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getProjects"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.projects.getProjects();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections-strategies/getCredentials"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCredentials"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connectionsStrategies.getCredentials("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/event"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEvent"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEvent.addEvent("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/item/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getItem"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingItem.getItem("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/benefit"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addBenefit"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBenefit.addBenefit("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automation"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAutomation"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAutomation.addAutomation("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/rejectreason"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addRejectReason"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsRejectreason.addRejectReason("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/creditnote/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCreditNote"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCreditnote.getCreditNote("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createCustomField"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.createCustomField({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Synergistic regional solution",
                dataType: "time",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/event/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEvent"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEvent.getEvent("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/candidate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCandidate"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsCandidate.addCandidate("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoice"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addInvoice"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingInvoice.addInvoice("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/drive"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDrives"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageDrive.getDrives("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/permission"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updatePermission"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestoragePermission.updatePermission("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateCompany"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmCompanies.updateCompany("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCollections"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingCollections.getCollections("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/application/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addApplications"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsApplication.addApplications("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/tag/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTags"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsTag.addTags("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/define"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "defineTargetField"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.defineTargetField({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Inverse radical firmware",
                dataType: "date",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/scorecard"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addScoreCard"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScorecard.addScoreCard("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transaction/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTransactions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTransaction.addTransactions("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folder"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addFolder"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFolder.addFolder("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/incomestatement/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addIncomeStatements"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingIncomestatement.addIncomeStatements("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/journalentry/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getJournalEntry"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingJournalentry.getJournalEntry("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTicketingAttachments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingAttachments.addTicketingAttachments("<value>", [
                {
                  fileName: "your_file_here",
                  fileUrl: "<value>",
                  uploader: "<value>",
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users/fromRemoteId"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "linkedUserFromRemoteId"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.linkedUserFromRemoteId("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/magic-links"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createMagicLink"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.magicLinks.createMagicLink({
                linkedUserOriginId: "<value>",
                email: "Elda_Spinka@hotmail.com",
                alias: "<value>",
                idProject: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/company"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addHrisCompany"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisCompany.addHrisCompany("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/candidate"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCandidates"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsCandidate.getCandidates("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/drive/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDrive"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageDrive.getDrive("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook/{id}"]["put"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateWebhookStatus"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.updateWebhookStatus("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/dependent"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDependent"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisDependent.addDependent("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activity"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getActivitys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsActivity.getActivitys("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/screeningquestion"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addScreeningQuestion"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScreeningquestion.addScreeningQuestion("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/job/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getJob"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJob.getJob("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/user/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAtsUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsUser.addAtsUsers("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPanoraCoreUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.getPanoraCoreUsers();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/profile"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "AuthController_getProfile"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.authControllerGetProfile();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employeepayrollrun/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployeePayrollRun"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployeepayrollrun.getEmployeePayrollRun("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automation"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAutomations"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAutomation.getAutomations("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaign/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCampaigns"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationCampaign.addCampaigns("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/application"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addApplication"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsApplication.addApplication("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachment"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAccountingAttachments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAttachment.getAccountingAttachments("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/creditnote"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCreditNote"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCreditnote.addCreditNote("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getHello"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.getHello();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/generate-apikey"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "generateApiKey"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.generateApiKey({
                projectId: "<value>",
                userId: "<value>",
                keyName: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCrmCompany"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmCompanies.addCrmCompany("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/paygroup"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPayGroup"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPaygroup.addPayGroup("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/item"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addItem"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingItem.addItem("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/permission"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPermissions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestoragePermission.getPermissions("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/location/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getLocation"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisLocation.getLocation("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoff/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTimeoff"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoff.getTimeoff("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expense"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getExpenses"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingExpense.getExpenses("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoice"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getInvoices"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingInvoice.getInvoices("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "fetchLinkedUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.fetchLinkedUsers();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections-strategies/credentials"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getConnectionStrategyCredentials"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connectionsStrategies.getConnectionStrategyCredentials({
                type: "<value>",
                attributes: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/syncs/resyncs/{vertical}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "resync"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.syncs.resync("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/bankinfo"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getBankinfos"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBankinfo.getBankinfos("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payment"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPayments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPayment.getPayments("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/message/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addMessages"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationMessage.addMessages("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/job/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addJobs"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJob.addJobs("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/rejectreason"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getRejectReasons"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsRejectreason.getRejectReasons("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/user"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAtsUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsUser.addAtsUser("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/api-keys/{id}"]["delete"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "deleteApiKey"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.deleteApiKey("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCrmContacts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmContacts.getCrmContacts("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employeepayrollrun"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployeePayrollRun"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployeepayrollrun.addEmployeePayrollRun("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalance"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTimeoffBalances"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoffbalance.getTimeoffBalances("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expense/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addExpenses"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingExpense.addExpenses("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/incomestatement/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getIncomeStatement"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingIncomestatement.getIncomeStatement("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/file"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addFile"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFile.addFile("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/trackingcategory"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTrackingCategorys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTrackingcategory.getTrackingCategorys("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employment/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployment.addEmployments("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/action"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getActions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAction.getActions("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/department/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDepartment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsDepartment.getDepartment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/job"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addJob"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJob.addJob("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorder/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPurchaseOrder"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPurchaseorder.getPurchaseOrder("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingAttachments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingAttachments.getTicketingAttachments("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDeals"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmDeals.addDeals("<value>", [
                {
                  name: "<value>",
                  description: "Realigned eco-centric flexibility",
                  amount: 8715.11,
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCollection"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingCollections.getCollection("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employee/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployees"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployee.addEmployees("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/email/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmails"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEmail.addEmails("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/template/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTemplates"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationTemplate.addTemplates("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/offer/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addOffers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffer.addOffers("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/screeningquestion"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getScreeningQuestions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScreeningquestion.getScreeningQuestions("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEeocs"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsEeocs.getEeocs("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachment/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAccountingAttachments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAttachment.addAccountingAttachments("<value>", "<value>", [
                {
                  fileName: "your_file_here",
                  fileUrl: "<value>",
                  uploader: "<value>",
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTeam"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTeams.getTeam("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/events/count"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEventsCount"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.events.getEventsCount();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/contact"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addMarketingAutomationContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationContact.addMarketingAutomationContact("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/candidate/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCandidate"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsCandidate.getCandidate("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/magic-links"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMagicLinks"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.magicLinks.getMagicLinks();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/paygroup/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPayGroups"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPaygroup.addPayGroups("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstage"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addJobInterviewStage"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJobinterviewstage.addJobInterviewStage("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/payrollrun/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPayrollRuns"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPayrollrun.addPayrollRuns("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalance/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTimeoffBalance"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoffbalance.getTimeoffBalance("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/message/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMessage"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationMessage.getMessage("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/health"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getHealth"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.getHealth();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateTicket"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTickets.updateTicket("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/attribute"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getFieldMappings"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.getFieldMappings();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/paygroup/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPayGroup"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPaygroup.getPayGroup("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/list/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addLists"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationList.addLists("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expense/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getExpense"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingExpense.getExpense("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingUsers.getTicketingUsers("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCrmContacts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmContacts.addCrmContacts("<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDeal"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmDeals.getDeal("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employeepayrollrun"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployeePayrollRuns"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployeepayrollrun.getEmployeePayrollRuns("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections/oauth/callback"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "handleOAuthCallback"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connections.handleOAuthCallback("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activity/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addActivitys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsActivity.addActivitys("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/account"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAccount"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAccount.addAccount("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatement/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCashflowStatements"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCashflowstatement.addCashflowStatements("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/template"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTemplate"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationTemplate.addTemplate("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/sharedlink/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getSharedlink"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageSharedlink.getSharedlink("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTicket"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTickets.addTicket("<value>", {
                name: "<value>",
                description: "Synergized secondary capacity",
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTasks"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmTasks.addTasks("<value>", [
                {
                  subject: "<value>",
                  content: "<value>",
                  status: "<value>",
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/project-connectors"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateConnectorsToProject"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.projectConnectors.updateConnectorsToProject({
                column: "<value>",
                status: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/dependent"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDependents"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisDependent.getDependents("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/user"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMarketingAutomationUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationUser.getMarketingAutomationUsers("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/application"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getApplications"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsApplication.getApplications("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payment"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPayment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPayment.addPayment("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/register"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "signUp"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.signUp({
                firstName: "Tia",
                lastName: "Carter",
                email: "Ola76@hotmail.com",
                strategy: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicket"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTickets.getTicket("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/map"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "mapField"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.mapField({
                attributeId: "<value>",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/action/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addActions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAction.addActions("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automation/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAutomation"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAutomation.getAutomation("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/vendorcredit/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getVendorCredit"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingVendorcredit.getVendorCredit("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/mw/{endpoint_uuid}"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "handleThirdPartyWebhook"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.mw.handleThirdPartyWebhook("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getComments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingComments.getComments("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/bankinfo/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addBankinfos"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBankinfo.addBankinfos("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/dependent/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDependents"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisDependent.addDependents("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/entities"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getFieldMappingsEntities"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.getFieldMappingsEntities();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/phonenumber"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPhoneNumbers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPhonenumber.getPhoneNumbers("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interview/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getInterview"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsInterview.getInterview("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatement"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCashflowStatement"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCashflowstatement.addCashflowStatement("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/vendorcredit"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addVendorCredit"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingVendorcredit.addVendorCredit("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoice/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addInvoices"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingInvoice.addInvoices("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/protected"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getHelloProtected"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.getHelloProtected();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCrmCompany"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmCompanies.getCrmCompany("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/tag"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTag"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsTag.addTag("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/tag/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAtsTag"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsTag.getAtsTag("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/project-connectors"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getConnectorsFromProject"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.projectConnectors.getConnectorsFromProject("<value>", "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/group"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addGroup"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisGroup.addGroup("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalance"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTimeoffBalance"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoffbalance.addTimeoffBalance("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/message"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addMessage"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationMessage.addMessage("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingAccount"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingAccounts.getTicketingAccount("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/users"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCrmUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmUsers.getCrmUsers("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/projects"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createProject"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.projects.createProject({
                name: "<value>",
                idUser: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections-strategies/update"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateConnectionStrategy"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connectionsStrategies.updateConnectionStrategy({
                idCs: "<value>",
                status: false,
                attributes: [
                  "<value>",
                ],
                values: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/user/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAtsUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsUser.getAtsUser("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/eeocs/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEeocss"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsEeocs.addEeocss("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/office/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getOffice"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffice.getOffice("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTicketingAttachment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingAttachments.addTicketingAttachment("<value>", {
                fileName: "your_file_here",
                fileUrl: "<value>",
                uploader: "<value>",
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/managed-webhooks/{id_connection}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getManagedWebhooks"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.managedWebhooks.getManagedWebhooks("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getNote"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmNotes.getNote("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getStages"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmStages.getStages("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/location"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getLocations"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisLocation.getLocations("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/address/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAddresss"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAddress.addAddresss("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contact"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAccountingContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingContact.addAccountingContact("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/value"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getFieldMappingValues"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.getFieldMappingValues();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/user/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMarketingAutomationUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationUser.getMarketingAutomationUser("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/application/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getApplication"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsApplication.getApplication("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/office/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addOffices"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffice.addOffices("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getWebhooksMetadata"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.getWebhooksMetadata();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections-strategies/toggle"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "toggleConnectionStrategy"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connectionsStrategies.toggleConnectionStrategy({
                idCs: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/office"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getOffices"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffice.getOffices("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employment"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployment.addEmployment("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/action/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAction"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAction.getAction("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interview"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addInterview"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsInterview.addInterview("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTickets"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTickets.addTickets("<value>", [
                {
                  name: "<value>",
                  description: "Switchable attitude-oriented concept",
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addComments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingComments.addComments("<value>", [
                {
                  body: "<value>",
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/magic-links/single"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMagicLink"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.magicLinks.getMagicLink("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employeepayrollrun/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployeePayrollRuns"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployeepayrollrun.addEmployeePayrollRuns("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/balancesheet/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addBalanceSheets"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingBalancesheet.addBalanceSheets("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/passthrough"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "passthroughRequest"
          "source": |-
            import { Panora } from "panora-ts";
            import { Method } from "panora-ts/models/components";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.passthrough.passthroughRequest("<value>", "<value>", "<value>", {
                method: Method.Delete,
                path: "/rescue",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employerbenefit/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployerBenefit"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployerbenefit.getEmployerBenefit("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/location"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addLocation"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisLocation.addLocation("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/department"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDepartments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsDepartment.getDepartments("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalance/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTimeoffBalances"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoffbalance.addTimeoffBalances("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activity"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addActivity"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsActivity.addActivity("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/incomestatement"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getIncomeStatements"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingIncomestatement.getIncomeStatements("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEngagement"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmEngagements.getEngagement("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTasks"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmTasks.getTasks("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections-strategies/create"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createConnectionStrategy"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connectionsStrategies.createConnectionStrategy({
                type: "<value>",
                attributes: [
                  "<value>",
                ],
                values: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employee"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployees"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployee.getEmployees("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/email"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmail"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEmail.addEmail("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/list"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getLists"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationList.getLists("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/list"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addList"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationList.addList("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/balancesheet"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getBalanceSheets"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingBalancesheet.getBalanceSheets("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCompanies"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmCompanies.getCompanies("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/organisations/create"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createOrganisation"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.organisations.createOrganisation({
                name: "<value>",
                stripeCustomerId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoff"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTimeoffs"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoff.getTimeoffs("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoff/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTimeoffs"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoff.addTimeoffs("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/balancesheet"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addBalanceSheet"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingBalancesheet.addBalanceSheet("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorder"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPurchaseOrder"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPurchaseorder.addPurchaseOrder("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/benefit/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getBenefit"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBenefit.getBenefit("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/group"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getGroups"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisGroup.getGroups("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachment/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAtsAttachments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsAttachment.addAtsAttachments("<value>", "<value>", [
                {
                  fileName: "your_file_here",
                  fileUrl: "<value>",
                  uploader: "<value>",
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/taxrate/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTaxRates"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTaxrate.addTaxRates("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/incomestatement"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addIncomeStatement"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingIncomestatement.addIncomeStatement("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoice/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getInvoice"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingInvoice.getInvoice("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/managed-webhooks/remoteThirdPartyCreation"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createRemoteThirdPartyWebhook"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.managedWebhooks.createRemoteThirdPartyWebhook({
                idConnection: "<value>",
                mwIds: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEngagement"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmEngagements.addEngagement("<value>", {
                type: "<value>",
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachment"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAtsAttachments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsAttachment.getAtsAttachments("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/screeningquestion/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addScreeningQuestions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScreeningquestion.addScreeningQuestions("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/paygroup"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPayGroups"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPaygroup.getPayGroups("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/contact/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addMarketingAutomationContacts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationContact.addMarketingAutomationContacts("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/candidate/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCandidates"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsCandidate.addCandidates("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/department/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDepartments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsDepartment.addDepartments("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingUsers.getTicketingUser("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingAccounts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingAccounts.getTicketingAccounts("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCrmContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmContacts.addCrmContact("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTask"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmTasks.addTask("<value>", {
                subject: "<value>",
                content: "<value>",
                status: "<value>",
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/vendorcredit/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addVendorCredits"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingVendorcredit.addVendorCredits("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/permission"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPermission"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestoragePermission.addPermission("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/permission/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPermission"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestoragePermission.getPermission("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/offer"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addOffer"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffer.addOffer("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/account/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAccounts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAccount.addAccounts("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payment/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPayment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPayment.getPayment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/taxrate/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTaxRate"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTaxrate.getTaxRate("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/companyinfo/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCompanyInfo"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCompanyinfo.getCompanyInfo("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/companyinfo/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCompanyInfos"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCompanyinfo.addCompanyInfos("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/phonenumber/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPhoneNumber"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPhonenumber.getPhoneNumber("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/benefit"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getBenefits"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBenefit.getBenefits("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaign/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCampaign"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationCampaign.getCampaign("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interview"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getInterviews"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsInterview.getInterviews("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstage/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getJobInterviewStage"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJobinterviewstage.getJobInterviewStage("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/rejectreason/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addRejectReasons"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsRejectreason.addRejectReasons("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/account/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAccountingAccount"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAccount.getAccountingAccount("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contact/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAccountingContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingContact.getAccountingContact("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/trackingcategory/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTrackingCategory"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTrackingcategory.getTrackingCategory("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateEngagement"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmEngagements.updateEngagement("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addNote"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmNotes.addNote("<value>", {
                content: "<value>",
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getComment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingComments.getComment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employerbenefit"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployerBenefits"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployerbenefit.getEmployerBenefits("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/events"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPanoraCoreEvents"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.events.getPanoraCoreEvents(1, 10);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatement/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCashflowStatement"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCashflowstatement.getCashflowStatement("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/trackingcategory"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTrackingCategory"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTrackingcategory.addTrackingCategory("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/drive"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDrive"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageDrive.addDrive("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingContacts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingContacts.getTicketingContacts("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals/{id}"]["patch"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "updateDeal"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmDeals.updateDeal("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getNotes"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmNotes.getNotes("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCrmUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmUsers.getCrmUser("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folder"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getFolders"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFolder.getFolders("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folder/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getFolder"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFolder.getFolder("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/dependent/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getDependent"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisDependent.getDependent("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/action"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAction"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationAction.addAction("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/trackingcategory/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTrackingCategorys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTrackingcategory.addTrackingCategorys("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folder/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addFolders"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFolder.addFolders("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/user"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAtsUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsUser.getAtsUsers("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/companyinfo"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCompanyInfos"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCompanyinfo.getCompanyInfos("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/login"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "signIn"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.signIn({
                email: "Oda.Treutel97@hotmail.com",
                passwordHash: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEngagements"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmEngagements.addEngagements("<value>", [
                {
                  type: "<value>",
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/benefit/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addBenefits"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBenefit.addBenefits("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/message"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMessages"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationMessage.getMessages("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/address/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAddress"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAddress.getAddress("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/file"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getFiles"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFile.getFiles("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/sharedlink/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addSharedlinks"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageSharedlink.addSharedlinks("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDeal"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmDeals.addDeal("<value>", {
                name: "<value>",
                description: "Optional zero defect extranet",
                amount: 6413.89,
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addLinkedUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.addLinkedUser({
                linkedUserOriginId: "<value>",
                alias: "<value>",
                idProject: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaign"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCampaigns"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationCampaign.getCampaigns("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/rejectreason/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getRejectReason"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsRejectreason.getRejectReason("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getStage"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmStages.getStage("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoff"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTimeoff"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisTimeoff.addTimeoff("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/user"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addMarketingAutomationUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationUser.addMarketingAutomationUser("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEngagements"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmEngagements.getEngagements("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/event/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEvents"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEvent.addEvents("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payment/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPayments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPayment.addPayments("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingAttachment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingAttachments.getTicketingAttachment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEeocss"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsEeocs.getEeocss("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/account"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAccountingAccounts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAccount.getAccountingAccounts("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachment"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAccountingAttachment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAttachment.addAccountingAttachment("<value>", {
                fileName: "your_file_here",
                fileUrl: "<value>",
                uploader: "<value>",
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/journalentry"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getJournalEntrys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingJournalentry.getJournalEntrys("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCompanies"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmCompanies.addCompanies("<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/connections-strategies/delete"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "deleteConnectionStrategy"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.connectionsStrategies.deleteConnectionStrategy({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/payrollrun"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPayrollRuns"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPayrollrun.getPayrollRuns("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/offer/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getOffer"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffer.getOffer("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/scorecard/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getScoreCard"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScorecard.getScoreCard("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contact"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAccountingContacts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingContact.getAccountingContacts("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/creditnote"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCreditNotes"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCreditnote.getCreditNotes("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/taxrate"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTaxRate"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTaxrate.addTaxRate("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "createWebhookMetadata"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.createWebhookMetadata({
                url: "http://wild-flanker.biz",
                idProject: "<value>",
                scope: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingTags"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTags.getTicketingTags("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/location/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addLocations"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisLocation.addLocations("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interview/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addInterviews"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsInterview.addInterviews("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transaction"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addTransaction"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTransaction.addTransaction("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTeams"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTeams.getTeams("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstage/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addJobInterviewStages"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsJobinterviewstage.addJobInterviewStages("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/eeocs"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEeocs"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsEeocs.addEeocs("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/item"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getItems"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingItem.getItems("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/event"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMarketingAutomationEvents"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEvent.getMarketingAutomationEvents("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/balancesheet/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getBalanceSheet"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingBalancesheet.getBalanceSheet("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook/verifyEvent"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "verifyEvent"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.webhook.verifyEvent({
                signature: "<value>",
                secret: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTicketingContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingContacts.getTicketingContact("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/payrollrun/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPayrollRun"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPayrollrun.getPayrollRun("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/contact"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMarketingAutomationContacts"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationContact.getMarketingAutomationContacts("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatement"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCashflowStatements"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCashflowstatement.getCashflowStatements("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/sharedlink"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getSharedlinks"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageSharedlink.getSharedlinks("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/refresh-token"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "refreshAccessToken"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.refreshAccessToken({
                projectId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTickets"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingTickets.getTickets("<value>", false, 50, "<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachment/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAtsAttachment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsAttachment.getAtsAttachment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/scorecard/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addScoreCards"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScorecard.addScoreCards("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/api-keys"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getApiKeys"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.auth.getApiKeys();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/companyinfo"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCompanyInfo"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCompanyinfo.addCompanyInfo("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/creditnote/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCreditNotes"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingCreditnote.addCreditNotes("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/file/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addFiles"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFile.addFiles("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employee/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployee"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployee.getEmployee("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/email"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmails"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEmail.getEmails("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/screeningquestion/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getScreeningQuestion"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsScreeningquestion.getScreeningQuestion("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/drive/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addDrives"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageDrive.addDrives("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addNotes"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmNotes.addNotes("<value>", [
                {
                  content: "<value>",
                  fieldMappings: {},
                },
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/offer"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getOffers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffer.getOffers("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activity/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getActivity"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsActivity.getActivity("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/tag"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAtsTags"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsTag.getAtsTags("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachment/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getAccountingAttachment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAttachment.getAccountingAttachment("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getCrmContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.crmContacts.getCrmContact("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/syncs/status/{vertical}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getSyncStatus"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.syncs.getSyncStatus("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/email/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmail"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationEmail.getEmail("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/list/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getList"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationList.getList("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/item/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addItems"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingItem.addItems("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorder"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getPurchaseOrders"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPurchaseorder.getPurchaseOrders("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transaction/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTransaction"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingTransaction.getTransaction("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/journalentry"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addJournalEntry"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingJournalentry.addJournalEntry("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorder/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPurchaseOrders"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPurchaseorder.addPurchaseOrders("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addComment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.ticketingComments.addComment("<value>", {
                body: "<value>",
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/organisations"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getOrganisations"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.organisations.getOrganisations();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/template/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTemplate"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationTemplate.getTemplate("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/address"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAddress"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingAddress.addAddress("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaign"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addCampaign"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationCampaign.addCampaign("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/user/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addMarketingAutomationUsers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationUser.addMarketingAutomationUsers("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/file/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getFile"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestorageFile.getFile("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/company/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getHrisCompany"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisCompany.getHrisCompany("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employerbenefit/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addEmployerBenefits"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployerbenefit.addEmployerBenefits("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/group/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getGroup"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisGroup.getGroup("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/payrollrun"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPayrollRun"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisPayrollrun.addPayrollRun("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/phonenumber/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPhoneNumbers"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.accountingPhonenumber.addPhoneNumbers("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/permission/batch"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addPermissions"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.filestoragePermission.addPermissions("<value>", "<value>", [
                {},
              ], false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users/single"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getLinkedUser"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.getLinkedUser("<value>");

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/template"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getTemplates"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationTemplate.getTemplates("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachment"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addAtsAttachment"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsAttachment.addAtsAttachment("<value>", {
                fileName: "your_file_here",
                fileUrl: "<value>",
                uploader: "<value>",
                fieldMappings: {},
              }, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/office"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addOffice"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.atsOffice.addOffice("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/bankinfo"]["post"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "addBankinfo"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisBankinfo.addBankinfo("<value>", {}, false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employment"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getEmployments"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.hrisEmployment.getEmployments("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/contact/{id}"]["get"]
    update:
      "x-codeSamples":
        - "lang": "typescript"
          "label": "getMarketingAutomationContact"
          "source": |-
            import { Panora } from "panora-ts";

            const panora = new Panora({
              jwt: "<YOUR_BEARER_TOKEN_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomationContact.getMarketingAutomationContact("<value>", false);

              // Handle the result
              console.log(result)
            }

            run();
