/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ConnectionsControllerHandleGorgiasAuthUrlRequest = {
    account: string;
    responseType: string;
    nonce: string;
    scope: string;
    clientId: string;
    redirectUri: string;
    state: string;
};

export type ConnectionsControllerHandleGorgiasAuthUrlResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace ConnectionsControllerHandleGorgiasAuthUrlRequest$ {
    export const inboundSchema: z.ZodType<
        ConnectionsControllerHandleGorgiasAuthUrlRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            account: z.string(),
            response_type: z.string(),
            nonce: z.string(),
            scope: z.string(),
            client_id: z.string(),
            redirect_uri: z.string(),
            state: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                response_type: "responseType",
                client_id: "clientId",
                redirect_uri: "redirectUri",
            });
        });

    export type Outbound = {
        account: string;
        response_type: string;
        nonce: string;
        scope: string;
        client_id: string;
        redirect_uri: string;
        state: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectionsControllerHandleGorgiasAuthUrlRequest
    > = z
        .object({
            account: z.string(),
            responseType: z.string(),
            nonce: z.string(),
            scope: z.string(),
            clientId: z.string(),
            redirectUri: z.string(),
            state: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                responseType: "response_type",
                clientId: "client_id",
                redirectUri: "redirect_uri",
            });
        });
}

/** @internal */
export namespace ConnectionsControllerHandleGorgiasAuthUrlResponse$ {
    export const inboundSchema: z.ZodType<
        ConnectionsControllerHandleGorgiasAuthUrlResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectionsControllerHandleGorgiasAuthUrlResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
            });
        });
}
