/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddVendorCreditsRequest = {
    connectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    /**
     * The connection token
     */
    xConnectionToken: string;
    requestBody: Array<components.UnifiedVendorCreditInput>;
};

export type AddVendorCreditsResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedVendorCreditOutput | undefined;
};

export type AddVendorCreditsResponse = {
    httpMeta: components.HTTPMetadata;
    object?: AddVendorCreditsResponseBody | undefined;
    unifiedVendorCreditOutputs?: Array<components.UnifiedVendorCreditOutput> | undefined;
};

/** @internal */
export namespace AddVendorCreditsRequest$ {
    export const inboundSchema: z.ZodType<AddVendorCreditsRequest, z.ZodTypeDef, unknown> = z
        .object({
            connection_token: z.string(),
            remote_data: z.boolean().optional(),
            "x-connection-token": z.string(),
            RequestBody: z.array(components.UnifiedVendorCreditInput$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                connection_token: "connectionToken",
                remote_data: "remoteData",
                "x-connection-token": "xConnectionToken",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        connection_token: string;
        remote_data?: boolean | undefined;
        "x-connection-token": string;
        RequestBody: Array<components.UnifiedVendorCreditInput$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddVendorCreditsRequest> = z
        .object({
            connectionToken: z.string(),
            remoteData: z.boolean().optional(),
            xConnectionToken: z.string(),
            requestBody: z.array(components.UnifiedVendorCreditInput$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                connectionToken: "connection_token",
                remoteData: "remote_data",
                xConnectionToken: "x-connection-token",
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace AddVendorCreditsResponseBody$ {
    export const inboundSchema: z.ZodType<AddVendorCreditsResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedVendorCreditOutput$.inboundSchema.optional(),
        });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedVendorCreditOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddVendorCreditsResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedVendorCreditOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddVendorCreditsResponse$ {
    export const inboundSchema: z.ZodType<AddVendorCreditsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => AddVendorCreditsResponseBody$.inboundSchema).optional(),
            UnifiedVendorCreditOutputs: z
                .array(components.UnifiedVendorCreditOutput$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedVendorCreditOutputs: "unifiedVendorCreditOutputs",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: AddVendorCreditsResponseBody$.Outbound | undefined;
        UnifiedVendorCreditOutputs?:
            | Array<components.UnifiedVendorCreditOutput$.Outbound>
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddVendorCreditsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => AddVendorCreditsResponseBody$.outboundSchema).optional(),
            unifiedVendorCreditOutputs: z
                .array(components.UnifiedVendorCreditOutput$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedVendorCreditOutputs: "UnifiedVendorCreditOutputs",
            });
        });
}
