/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as operations from "../models/operations";
import { AccountingAccount } from "./accountingaccount";
import { AccountingAddress } from "./accountingaddress";
import { AccountingAttachment } from "./accountingattachment";
import { AccountingBalancesheet } from "./accountingbalancesheet";
import { AccountingCashflowstatement } from "./accountingcashflowstatement";
import { AccountingCompanyinfo } from "./accountingcompanyinfo";
import { AccountingContact } from "./accountingcontact";
import { AccountingCreditnote } from "./accountingcreditnote";
import { AccountingExpense } from "./accountingexpense";
import { AccountingIncomestatement } from "./accountingincomestatement";
import { AccountingInvoice } from "./accountinginvoice";
import { AccountingItem } from "./accountingitem";
import { AccountingJournalentry } from "./accountingjournalentry";
import { AccountingPayment } from "./accountingpayment";
import { AccountingPhonenumber } from "./accountingphonenumber";
import { AccountingPurchaseorder } from "./accountingpurchaseorder";
import { AccountingTaxrate } from "./accountingtaxrate";
import { AccountingTrackingcategory } from "./accountingtrackingcategory";
import { AccountingTransaction } from "./accountingtransaction";
import { AccountingVendorcredit } from "./accountingvendorcredit";
import { AtsActivity } from "./atsactivity";
import { AtsApplication } from "./atsapplication";
import { AtsAttachment } from "./atsattachment";
import { AtsCandidate } from "./atscandidate";
import { AtsDepartment } from "./atsdepartment";
import { AtsEeocs } from "./atseeocs";
import { AtsInterview } from "./atsinterview";
import { AtsJob } from "./atsjob";
import { AtsJobinterviewstage } from "./atsjobinterviewstage";
import { AtsOffer } from "./atsoffer";
import { AtsOffice } from "./atsoffice";
import { AtsRejectreason } from "./atsrejectreason";
import { AtsScorecard } from "./atsscorecard";
import { AtsScreeningquestion } from "./atsscreeningquestion";
import { AtsTag } from "./atstag";
import { AtsUser } from "./atsuser";
import { Auth } from "./auth";
import { Connections } from "./connections";
import { ConnectionsStrategies } from "./connectionsstrategies";
import { CrmCompanies } from "./crmcompanies";
import { CrmContacts } from "./crmcontacts";
import { CrmDeals } from "./crmdeals";
import { CrmEngagements } from "./crmengagements";
import { CrmNotes } from "./crmnotes";
import { CrmStages } from "./crmstages";
import { CrmTasks } from "./crmtasks";
import { CrmUsers } from "./crmusers";
import { Events } from "./events";
import { FieldMappings } from "./fieldmappings";
import { FilestorageDrive } from "./filestoragedrive";
import { FilestorageFile } from "./filestoragefile";
import { FilestorageFolder } from "./filestoragefolder";
import { FilestoragePermission } from "./filestoragepermission";
import { FilestorageSharedlink } from "./filestoragesharedlink";
import { HrisBankinfo } from "./hrisbankinfo";
import { HrisBenefit } from "./hrisbenefit";
import { HrisCompany } from "./hriscompany";
import { HrisDependent } from "./hrisdependent";
import { HrisEmployee } from "./hrisemployee";
import { HrisEmployeepayrollrun } from "./hrisemployeepayrollrun";
import { HrisEmployerbenefit } from "./hrisemployerbenefit";
import { HrisEmployment } from "./hrisemployment";
import { HrisGroup } from "./hrisgroup";
import { HrisLocation } from "./hrislocation";
import { HrisPaygroup } from "./hrispaygroup";
import { HrisPayrollrun } from "./hrispayrollrun";
import { HrisTimeoff } from "./hristimeoff";
import { HrisTimeoffbalance } from "./hristimeoffbalance";
import { LinkedUsers } from "./linkedusers";
import { MagicLinks } from "./magiclinks";
import { ManagedWebhooks } from "./managedwebhooks";
import { MarketingautomationAction } from "./marketingautomationaction";
import { MarketingautomationAutomation } from "./marketingautomationautomation";
import { MarketingautomationCampaign } from "./marketingautomationcampaign";
import { MarketingautomationContact } from "./marketingautomationcontact";
import { MarketingautomationEmail } from "./marketingautomationemail";
import { MarketingautomationEvent } from "./marketingautomationevent";
import { MarketingautomationList } from "./marketingautomationlist";
import { MarketingautomationMessage } from "./marketingautomationmessage";
import { MarketingautomationTemplate } from "./marketingautomationtemplate";
import { MarketingautomationUser } from "./marketingautomationuser";
import { Mw } from "./mw";
import { Organisations } from "./organisations";
import { Passthrough } from "./passthrough";
import { ProjectConnectors } from "./projectconnectors";
import { Projects } from "./projects";
import { Syncs } from "./syncs";
import { TicketingAccounts } from "./ticketingaccounts";
import { TicketingAttachments } from "./ticketingattachments";
import { TicketingCollections } from "./ticketingcollections";
import { TicketingComments } from "./ticketingcomments";
import { TicketingContacts } from "./ticketingcontacts";
import { TicketingTags } from "./ticketingtags";
import { TicketingTeams } from "./ticketingteams";
import { TicketingTickets } from "./ticketingtickets";
import { TicketingUsers } from "./ticketingusers";
import { Webhook } from "./webhook";

export class Panora extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _auth?: Auth;
    get auth(): Auth {
        return (this._auth ??= new Auth(this.options$));
    }

    private _connections?: Connections;
    get connections(): Connections {
        return (this._connections ??= new Connections(this.options$));
    }

    private _webhook?: Webhook;
    get webhook(): Webhook {
        return (this._webhook ??= new Webhook(this.options$));
    }

    private _managedWebhooks?: ManagedWebhooks;
    get managedWebhooks(): ManagedWebhooks {
        return (this._managedWebhooks ??= new ManagedWebhooks(this.options$));
    }

    private _mw?: Mw;
    get mw(): Mw {
        return (this._mw ??= new Mw(this.options$));
    }

    private _ticketingTickets?: TicketingTickets;
    get ticketingTickets(): TicketingTickets {
        return (this._ticketingTickets ??= new TicketingTickets(this.options$));
    }

    private _ticketingUsers?: TicketingUsers;
    get ticketingUsers(): TicketingUsers {
        return (this._ticketingUsers ??= new TicketingUsers(this.options$));
    }

    private _ticketingAccounts?: TicketingAccounts;
    get ticketingAccounts(): TicketingAccounts {
        return (this._ticketingAccounts ??= new TicketingAccounts(this.options$));
    }

    private _ticketingContacts?: TicketingContacts;
    get ticketingContacts(): TicketingContacts {
        return (this._ticketingContacts ??= new TicketingContacts(this.options$));
    }

    private _crmCompanies?: CrmCompanies;
    get crmCompanies(): CrmCompanies {
        return (this._crmCompanies ??= new CrmCompanies(this.options$));
    }

    private _crmContacts?: CrmContacts;
    get crmContacts(): CrmContacts {
        return (this._crmContacts ??= new CrmContacts(this.options$));
    }

    private _crmDeals?: CrmDeals;
    get crmDeals(): CrmDeals {
        return (this._crmDeals ??= new CrmDeals(this.options$));
    }

    private _crmEngagements?: CrmEngagements;
    get crmEngagements(): CrmEngagements {
        return (this._crmEngagements ??= new CrmEngagements(this.options$));
    }

    private _crmNotes?: CrmNotes;
    get crmNotes(): CrmNotes {
        return (this._crmNotes ??= new CrmNotes(this.options$));
    }

    private _crmStages?: CrmStages;
    get crmStages(): CrmStages {
        return (this._crmStages ??= new CrmStages(this.options$));
    }

    private _crmTasks?: CrmTasks;
    get crmTasks(): CrmTasks {
        return (this._crmTasks ??= new CrmTasks(this.options$));
    }

    private _crmUsers?: CrmUsers;
    get crmUsers(): CrmUsers {
        return (this._crmUsers ??= new CrmUsers(this.options$));
    }

    private _ticketingCollections?: TicketingCollections;
    get ticketingCollections(): TicketingCollections {
        return (this._ticketingCollections ??= new TicketingCollections(this.options$));
    }

    private _ticketingComments?: TicketingComments;
    get ticketingComments(): TicketingComments {
        return (this._ticketingComments ??= new TicketingComments(this.options$));
    }

    private _ticketingTags?: TicketingTags;
    get ticketingTags(): TicketingTags {
        return (this._ticketingTags ??= new TicketingTags(this.options$));
    }

    private _ticketingTeams?: TicketingTeams;
    get ticketingTeams(): TicketingTeams {
        return (this._ticketingTeams ??= new TicketingTeams(this.options$));
    }

    private _linkedUsers?: LinkedUsers;
    get linkedUsers(): LinkedUsers {
        return (this._linkedUsers ??= new LinkedUsers(this.options$));
    }

    private _organisations?: Organisations;
    get organisations(): Organisations {
        return (this._organisations ??= new Organisations(this.options$));
    }

    private _projects?: Projects;
    get projects(): Projects {
        return (this._projects ??= new Projects(this.options$));
    }

    private _fieldMappings?: FieldMappings;
    get fieldMappings(): FieldMappings {
        return (this._fieldMappings ??= new FieldMappings(this.options$));
    }

    private _events?: Events;
    get events(): Events {
        return (this._events ??= new Events(this.options$));
    }

    private _magicLinks?: MagicLinks;
    get magicLinks(): MagicLinks {
        return (this._magicLinks ??= new MagicLinks(this.options$));
    }

    private _passthrough?: Passthrough;
    get passthrough(): Passthrough {
        return (this._passthrough ??= new Passthrough(this.options$));
    }

    private _connectionsStrategies?: ConnectionsStrategies;
    get connectionsStrategies(): ConnectionsStrategies {
        return (this._connectionsStrategies ??= new ConnectionsStrategies(this.options$));
    }

    private _syncs?: Syncs;
    get syncs(): Syncs {
        return (this._syncs ??= new Syncs(this.options$));
    }

    private _projectConnectors?: ProjectConnectors;
    get projectConnectors(): ProjectConnectors {
        return (this._projectConnectors ??= new ProjectConnectors(this.options$));
    }

    private _hrisBankinfo?: HrisBankinfo;
    get hrisBankinfo(): HrisBankinfo {
        return (this._hrisBankinfo ??= new HrisBankinfo(this.options$));
    }

    private _hrisBenefit?: HrisBenefit;
    get hrisBenefit(): HrisBenefit {
        return (this._hrisBenefit ??= new HrisBenefit(this.options$));
    }

    private _hrisCompany?: HrisCompany;
    get hrisCompany(): HrisCompany {
        return (this._hrisCompany ??= new HrisCompany(this.options$));
    }

    private _hrisDependent?: HrisDependent;
    get hrisDependent(): HrisDependent {
        return (this._hrisDependent ??= new HrisDependent(this.options$));
    }

    private _hrisEmployeepayrollrun?: HrisEmployeepayrollrun;
    get hrisEmployeepayrollrun(): HrisEmployeepayrollrun {
        return (this._hrisEmployeepayrollrun ??= new HrisEmployeepayrollrun(this.options$));
    }

    private _hrisEmployee?: HrisEmployee;
    get hrisEmployee(): HrisEmployee {
        return (this._hrisEmployee ??= new HrisEmployee(this.options$));
    }

    private _hrisEmployerbenefit?: HrisEmployerbenefit;
    get hrisEmployerbenefit(): HrisEmployerbenefit {
        return (this._hrisEmployerbenefit ??= new HrisEmployerbenefit(this.options$));
    }

    private _hrisEmployment?: HrisEmployment;
    get hrisEmployment(): HrisEmployment {
        return (this._hrisEmployment ??= new HrisEmployment(this.options$));
    }

    private _hrisGroup?: HrisGroup;
    get hrisGroup(): HrisGroup {
        return (this._hrisGroup ??= new HrisGroup(this.options$));
    }

    private _hrisLocation?: HrisLocation;
    get hrisLocation(): HrisLocation {
        return (this._hrisLocation ??= new HrisLocation(this.options$));
    }

    private _hrisPaygroup?: HrisPaygroup;
    get hrisPaygroup(): HrisPaygroup {
        return (this._hrisPaygroup ??= new HrisPaygroup(this.options$));
    }

    private _hrisPayrollrun?: HrisPayrollrun;
    get hrisPayrollrun(): HrisPayrollrun {
        return (this._hrisPayrollrun ??= new HrisPayrollrun(this.options$));
    }

    private _hrisTimeoff?: HrisTimeoff;
    get hrisTimeoff(): HrisTimeoff {
        return (this._hrisTimeoff ??= new HrisTimeoff(this.options$));
    }

    private _hrisTimeoffbalance?: HrisTimeoffbalance;
    get hrisTimeoffbalance(): HrisTimeoffbalance {
        return (this._hrisTimeoffbalance ??= new HrisTimeoffbalance(this.options$));
    }

    private _marketingautomationAction?: MarketingautomationAction;
    get marketingautomationAction(): MarketingautomationAction {
        return (this._marketingautomationAction ??= new MarketingautomationAction(this.options$));
    }

    private _marketingautomationAutomation?: MarketingautomationAutomation;
    get marketingautomationAutomation(): MarketingautomationAutomation {
        return (this._marketingautomationAutomation ??= new MarketingautomationAutomation(
            this.options$
        ));
    }

    private _marketingautomationCampaign?: MarketingautomationCampaign;
    get marketingautomationCampaign(): MarketingautomationCampaign {
        return (this._marketingautomationCampaign ??= new MarketingautomationCampaign(
            this.options$
        ));
    }

    private _marketingautomationContact?: MarketingautomationContact;
    get marketingautomationContact(): MarketingautomationContact {
        return (this._marketingautomationContact ??= new MarketingautomationContact(this.options$));
    }

    private _marketingautomationEmail?: MarketingautomationEmail;
    get marketingautomationEmail(): MarketingautomationEmail {
        return (this._marketingautomationEmail ??= new MarketingautomationEmail(this.options$));
    }

    private _marketingautomationEvent?: MarketingautomationEvent;
    get marketingautomationEvent(): MarketingautomationEvent {
        return (this._marketingautomationEvent ??= new MarketingautomationEvent(this.options$));
    }

    private _marketingautomationList?: MarketingautomationList;
    get marketingautomationList(): MarketingautomationList {
        return (this._marketingautomationList ??= new MarketingautomationList(this.options$));
    }

    private _marketingautomationMessage?: MarketingautomationMessage;
    get marketingautomationMessage(): MarketingautomationMessage {
        return (this._marketingautomationMessage ??= new MarketingautomationMessage(this.options$));
    }

    private _marketingautomationTemplate?: MarketingautomationTemplate;
    get marketingautomationTemplate(): MarketingautomationTemplate {
        return (this._marketingautomationTemplate ??= new MarketingautomationTemplate(
            this.options$
        ));
    }

    private _marketingautomationUser?: MarketingautomationUser;
    get marketingautomationUser(): MarketingautomationUser {
        return (this._marketingautomationUser ??= new MarketingautomationUser(this.options$));
    }

    private _atsActivity?: AtsActivity;
    get atsActivity(): AtsActivity {
        return (this._atsActivity ??= new AtsActivity(this.options$));
    }

    private _atsApplication?: AtsApplication;
    get atsApplication(): AtsApplication {
        return (this._atsApplication ??= new AtsApplication(this.options$));
    }

    private _atsAttachment?: AtsAttachment;
    get atsAttachment(): AtsAttachment {
        return (this._atsAttachment ??= new AtsAttachment(this.options$));
    }

    private _atsCandidate?: AtsCandidate;
    get atsCandidate(): AtsCandidate {
        return (this._atsCandidate ??= new AtsCandidate(this.options$));
    }

    private _atsDepartment?: AtsDepartment;
    get atsDepartment(): AtsDepartment {
        return (this._atsDepartment ??= new AtsDepartment(this.options$));
    }

    private _atsInterview?: AtsInterview;
    get atsInterview(): AtsInterview {
        return (this._atsInterview ??= new AtsInterview(this.options$));
    }

    private _atsJobinterviewstage?: AtsJobinterviewstage;
    get atsJobinterviewstage(): AtsJobinterviewstage {
        return (this._atsJobinterviewstage ??= new AtsJobinterviewstage(this.options$));
    }

    private _atsJob?: AtsJob;
    get atsJob(): AtsJob {
        return (this._atsJob ??= new AtsJob(this.options$));
    }

    private _atsOffer?: AtsOffer;
    get atsOffer(): AtsOffer {
        return (this._atsOffer ??= new AtsOffer(this.options$));
    }

    private _atsOffice?: AtsOffice;
    get atsOffice(): AtsOffice {
        return (this._atsOffice ??= new AtsOffice(this.options$));
    }

    private _atsRejectreason?: AtsRejectreason;
    get atsRejectreason(): AtsRejectreason {
        return (this._atsRejectreason ??= new AtsRejectreason(this.options$));
    }

    private _atsScorecard?: AtsScorecard;
    get atsScorecard(): AtsScorecard {
        return (this._atsScorecard ??= new AtsScorecard(this.options$));
    }

    private _atsScreeningquestion?: AtsScreeningquestion;
    get atsScreeningquestion(): AtsScreeningquestion {
        return (this._atsScreeningquestion ??= new AtsScreeningquestion(this.options$));
    }

    private _atsTag?: AtsTag;
    get atsTag(): AtsTag {
        return (this._atsTag ??= new AtsTag(this.options$));
    }

    private _atsUser?: AtsUser;
    get atsUser(): AtsUser {
        return (this._atsUser ??= new AtsUser(this.options$));
    }

    private _atsEeocs?: AtsEeocs;
    get atsEeocs(): AtsEeocs {
        return (this._atsEeocs ??= new AtsEeocs(this.options$));
    }

    private _accountingAccount?: AccountingAccount;
    get accountingAccount(): AccountingAccount {
        return (this._accountingAccount ??= new AccountingAccount(this.options$));
    }

    private _accountingAddress?: AccountingAddress;
    get accountingAddress(): AccountingAddress {
        return (this._accountingAddress ??= new AccountingAddress(this.options$));
    }

    private _accountingAttachment?: AccountingAttachment;
    get accountingAttachment(): AccountingAttachment {
        return (this._accountingAttachment ??= new AccountingAttachment(this.options$));
    }

    private _accountingBalancesheet?: AccountingBalancesheet;
    get accountingBalancesheet(): AccountingBalancesheet {
        return (this._accountingBalancesheet ??= new AccountingBalancesheet(this.options$));
    }

    private _accountingCashflowstatement?: AccountingCashflowstatement;
    get accountingCashflowstatement(): AccountingCashflowstatement {
        return (this._accountingCashflowstatement ??= new AccountingCashflowstatement(
            this.options$
        ));
    }

    private _accountingCompanyinfo?: AccountingCompanyinfo;
    get accountingCompanyinfo(): AccountingCompanyinfo {
        return (this._accountingCompanyinfo ??= new AccountingCompanyinfo(this.options$));
    }

    private _accountingContact?: AccountingContact;
    get accountingContact(): AccountingContact {
        return (this._accountingContact ??= new AccountingContact(this.options$));
    }

    private _accountingCreditnote?: AccountingCreditnote;
    get accountingCreditnote(): AccountingCreditnote {
        return (this._accountingCreditnote ??= new AccountingCreditnote(this.options$));
    }

    private _accountingExpense?: AccountingExpense;
    get accountingExpense(): AccountingExpense {
        return (this._accountingExpense ??= new AccountingExpense(this.options$));
    }

    private _accountingIncomestatement?: AccountingIncomestatement;
    get accountingIncomestatement(): AccountingIncomestatement {
        return (this._accountingIncomestatement ??= new AccountingIncomestatement(this.options$));
    }

    private _accountingInvoice?: AccountingInvoice;
    get accountingInvoice(): AccountingInvoice {
        return (this._accountingInvoice ??= new AccountingInvoice(this.options$));
    }

    private _accountingItem?: AccountingItem;
    get accountingItem(): AccountingItem {
        return (this._accountingItem ??= new AccountingItem(this.options$));
    }

    private _accountingJournalentry?: AccountingJournalentry;
    get accountingJournalentry(): AccountingJournalentry {
        return (this._accountingJournalentry ??= new AccountingJournalentry(this.options$));
    }

    private _accountingPayment?: AccountingPayment;
    get accountingPayment(): AccountingPayment {
        return (this._accountingPayment ??= new AccountingPayment(this.options$));
    }

    private _accountingPhonenumber?: AccountingPhonenumber;
    get accountingPhonenumber(): AccountingPhonenumber {
        return (this._accountingPhonenumber ??= new AccountingPhonenumber(this.options$));
    }

    private _accountingPurchaseorder?: AccountingPurchaseorder;
    get accountingPurchaseorder(): AccountingPurchaseorder {
        return (this._accountingPurchaseorder ??= new AccountingPurchaseorder(this.options$));
    }

    private _accountingTaxrate?: AccountingTaxrate;
    get accountingTaxrate(): AccountingTaxrate {
        return (this._accountingTaxrate ??= new AccountingTaxrate(this.options$));
    }

    private _accountingTrackingcategory?: AccountingTrackingcategory;
    get accountingTrackingcategory(): AccountingTrackingcategory {
        return (this._accountingTrackingcategory ??= new AccountingTrackingcategory(this.options$));
    }

    private _accountingTransaction?: AccountingTransaction;
    get accountingTransaction(): AccountingTransaction {
        return (this._accountingTransaction ??= new AccountingTransaction(this.options$));
    }

    private _accountingVendorcredit?: AccountingVendorcredit;
    get accountingVendorcredit(): AccountingVendorcredit {
        return (this._accountingVendorcredit ??= new AccountingVendorcredit(this.options$));
    }

    private _filestorageDrive?: FilestorageDrive;
    get filestorageDrive(): FilestorageDrive {
        return (this._filestorageDrive ??= new FilestorageDrive(this.options$));
    }

    private _filestorageFile?: FilestorageFile;
    get filestorageFile(): FilestorageFile {
        return (this._filestorageFile ??= new FilestorageFile(this.options$));
    }

    private _filestorageFolder?: FilestorageFolder;
    get filestorageFolder(): FilestorageFolder {
        return (this._filestorageFolder ??= new FilestorageFolder(this.options$));
    }

    private _filestorageSharedlink?: FilestorageSharedlink;
    get filestorageSharedlink(): FilestorageSharedlink {
        return (this._filestorageSharedlink ??= new FilestorageSharedlink(this.options$));
    }

    private _filestoragePermission?: FilestoragePermission;
    get filestoragePermission(): FilestoragePermission {
        return (this._filestoragePermission ??= new FilestoragePermission(this.options$));
    }

    private _ticketingAttachments?: TicketingAttachments;
    get ticketingAttachments(): TicketingAttachments {
        return (this._ticketingAttachments ??= new TicketingAttachments(this.options$));
    }

    async getHello(options?: RequestOptions): Promise<operations.GetHelloResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/")();

        const query$ = "";

        let security$;
        if (typeof this.options$.jwt === "function") {
            security$ = { jwt: await this.options$.jwt() };
        } else if (this.options$.jwt) {
            security$ = { jwt: this.options$.jwt };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getHello",
            oAuth2Scopes: [],
            securitySource: this.options$.jwt,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetHelloResponse>()
            .json(200, operations.GetHelloResponse$, { key: "string" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    async getHealth(options?: RequestOptions): Promise<operations.GetHealthResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/health")();

        const query$ = "";

        let security$;
        if (typeof this.options$.jwt === "function") {
            security$ = { jwt: await this.options$.jwt() };
        } else if (this.options$.jwt) {
            security$ = { jwt: this.options$.jwt };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getHealth",
            oAuth2Scopes: [],
            securitySource: this.options$.jwt,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetHealthResponse>()
            .json(200, operations.GetHealthResponse$, { key: "number" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    async getHelloProtected(
        options?: RequestOptions
    ): Promise<operations.GetHelloProtectedResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/protected")();

        const query$ = "";

        let security$;
        if (typeof this.options$.jwt === "function") {
            security$ = { jwt: await this.options$.jwt() };
        } else if (this.options$.jwt) {
            security$ = { jwt: this.options$.jwt };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getHelloProtected",
            oAuth2Scopes: [],
            securitySource: this.options$.jwt,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetHelloProtectedResponse>()
            .json(200, operations.GetHelloProtectedResponse$, { key: "string" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
