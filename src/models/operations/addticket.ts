/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type AddTicketRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ticketing software.
     */
    remoteData?: boolean | undefined;
    unifiedTicketInput: components.UnifiedTicketInput;
};

export type AddTicketResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTicketOutput | undefined;
};

export type AddTicketResponse = {
    httpMeta: components.HTTPMetadata;
    object?: AddTicketResponseBody | undefined;
    unifiedTicketOutput?: components.UnifiedTicketOutput | undefined;
};

/** @internal */
export namespace AddTicketRequest$ {
    export const inboundSchema: z.ZodType<AddTicketRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedTicketInput: components.UnifiedTicketInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedTicketInput: "unifiedTicketInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedTicketInput: components.UnifiedTicketInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTicketRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedTicketInput: components.UnifiedTicketInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedTicketInput: "UnifiedTicketInput",
            });
        });
}

/** @internal */
export namespace AddTicketResponseBody$ {
    export const inboundSchema: z.ZodType<AddTicketResponseBody, z.ZodTypeDef, unknown> = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedTicketOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedTicketOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTicketResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedTicketOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddTicketResponse$ {
    export const inboundSchema: z.ZodType<AddTicketResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => AddTicketResponseBody$.inboundSchema).optional(),
            UnifiedTicketOutput: components.UnifiedTicketOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedTicketOutput: "unifiedTicketOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: AddTicketResponseBody$.Outbound | undefined;
        UnifiedTicketOutput?: components.UnifiedTicketOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTicketResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => AddTicketResponseBody$.outboundSchema).optional(),
            unifiedTicketOutput: components.UnifiedTicketOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedTicketOutput: "UnifiedTicketOutput",
            });
        });
}
