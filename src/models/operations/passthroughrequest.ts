/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type PassthroughRequestRequest = {
    integrationId: string;
    linkedUserId: string;
    vertical: string;
    passThroughRequestDto: components.PassThroughRequestDto;
};

export type PassthroughRequestResponse = {
    httpMeta: components.HTTPMetadata;
    passThroughResponse?: components.PassThroughResponse | undefined;
};

/** @internal */
export namespace PassthroughRequestRequest$ {
    export const inboundSchema: z.ZodType<PassthroughRequestRequest, z.ZodTypeDef, unknown> = z
        .object({
            integrationId: z.string(),
            linkedUserId: z.string(),
            vertical: z.string(),
            PassThroughRequestDto: components.PassThroughRequestDto$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                PassThroughRequestDto: "passThroughRequestDto",
            });
        });

    export type Outbound = {
        integrationId: string;
        linkedUserId: string;
        vertical: string;
        PassThroughRequestDto: components.PassThroughRequestDto$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PassthroughRequestRequest> = z
        .object({
            integrationId: z.string(),
            linkedUserId: z.string(),
            vertical: z.string(),
            passThroughRequestDto: components.PassThroughRequestDto$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                passThroughRequestDto: "PassThroughRequestDto",
            });
        });
}

/** @internal */
export namespace PassthroughRequestResponse$ {
    export const inboundSchema: z.ZodType<PassthroughRequestResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            PassThroughResponse: components.PassThroughResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                PassThroughResponse: "passThroughResponse",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        PassThroughResponse?: components.PassThroughResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PassthroughRequestResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            passThroughResponse: components.PassThroughResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                passThroughResponse: "PassThroughResponse",
            });
        });
}
