/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddBankinfoRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Hris software.
     */
    remoteData?: boolean | undefined;
    unifiedBankInfoInput: components.UnifiedBankInfoInput;
};

export type AddBankinfoResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedBankInfoOutput | undefined;
};

export type AddBankinfoResponse = {
    httpMeta: components.HTTPMetadata;
    object?: AddBankinfoResponseBody | undefined;
    unifiedBankInfoOutput?: components.UnifiedBankInfoOutput | undefined;
};

/** @internal */
export namespace AddBankinfoRequest$ {
    export const inboundSchema: z.ZodType<AddBankinfoRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedBankInfoInput: components.UnifiedBankInfoInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedBankInfoInput: "unifiedBankInfoInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedBankInfoInput: components.UnifiedBankInfoInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddBankinfoRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedBankInfoInput: components.UnifiedBankInfoInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedBankInfoInput: "UnifiedBankInfoInput",
            });
        });
}

/** @internal */
export namespace AddBankinfoResponseBody$ {
    export const inboundSchema: z.ZodType<AddBankinfoResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedBankInfoOutput$.inboundSchema.optional(),
        });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedBankInfoOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddBankinfoResponseBody> =
        z.object({
            message: z.string().optional(),
            error: z.string().optional(),
            statusCode: z.number(),
            data: components.UnifiedBankInfoOutput$.outboundSchema.optional(),
        });
}

/** @internal */
export namespace AddBankinfoResponse$ {
    export const inboundSchema: z.ZodType<AddBankinfoResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => AddBankinfoResponseBody$.inboundSchema).optional(),
            UnifiedBankInfoOutput: components.UnifiedBankInfoOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedBankInfoOutput: "unifiedBankInfoOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: AddBankinfoResponseBody$.Outbound | undefined;
        UnifiedBankInfoOutput?: components.UnifiedBankInfoOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddBankinfoResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => AddBankinfoResponseBody$.outboundSchema).optional(),
            unifiedBankInfoOutput: components.UnifiedBankInfoOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedBankInfoOutput: "UnifiedBankInfoOutput",
            });
        });
}
