/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type AddTagRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ats software.
     */
    remoteData?: boolean | undefined;
    unifiedTagInput: components.UnifiedTagInput;
};

export type AddTagResponseBody = {
    message?: string | undefined;
    error?: string | undefined;
    statusCode: number;
    data?: components.UnifiedTagOutput | undefined;
};

export type AddTagResponse = {
    httpMeta: components.HTTPMetadata;
    object?: AddTagResponseBody | undefined;
    unifiedTagOutput?: components.UnifiedTagOutput | undefined;
};

/** @internal */
export namespace AddTagRequest$ {
    export const inboundSchema: z.ZodType<AddTagRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedTagInput: components.UnifiedTagInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedTagInput: "unifiedTagInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedTagInput: components.UnifiedTagInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTagRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedTagInput: components.UnifiedTagInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedTagInput: "UnifiedTagInput",
            });
        });
}

/** @internal */
export namespace AddTagResponseBody$ {
    export const inboundSchema: z.ZodType<AddTagResponseBody, z.ZodTypeDef, unknown> = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedTagOutput$.inboundSchema.optional(),
    });

    export type Outbound = {
        message?: string | undefined;
        error?: string | undefined;
        statusCode: number;
        data?: components.UnifiedTagOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTagResponseBody> = z.object({
        message: z.string().optional(),
        error: z.string().optional(),
        statusCode: z.number(),
        data: components.UnifiedTagOutput$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace AddTagResponse$ {
    export const inboundSchema: z.ZodType<AddTagResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => AddTagResponseBody$.inboundSchema).optional(),
            UnifiedTagOutput: components.UnifiedTagOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedTagOutput: "unifiedTagOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: AddTagResponseBody$.Outbound | undefined;
        UnifiedTagOutput?: components.UnifiedTagOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddTagResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => AddTagResponseBody$.outboundSchema).optional(),
            unifiedTagOutput: components.UnifiedTagOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedTagOutput: "UnifiedTagOutput",
            });
        });
}
